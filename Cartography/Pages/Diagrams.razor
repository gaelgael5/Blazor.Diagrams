@page "/diagrams"

@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models

<!-- required to resolve DiagramCanvas component -->
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Tools

<!--
Parent of DiagramCanvas has to have a fixed width/height
or it will not be rendered.

100vw = 100% viewport width
100vh = 100% viewport height
-->
<div class="row h-100">

    <div class="col-1">
        @* Toolbox *@
        <div class="row h-100 p-4 no-gutters" style="background: #eee;">
            @foreach (string category in toolbox.Categories())
            {
                <div class="text-center" draggable="true">
                    <span>@category</span>
                        @foreach (ToolboxItem item in toolbox.GetByCategory(category))
                        {

                            string uuid = item.Uuid.ToString();

                            <div class="text-center" draggable="true"
                                @ondragstart="() => OnDragStart(uuid)">
                                <img class="d-block m-auto" src="@item.Icon" />
                                <span>@item.Label</span>
                            </div>

                        }
                </div>
            }
        </div>
    </div>

    <div class="col-11" style="width:100vw; height: 100vh"
         ondragover="event.preventDefault();"
         @ondragover:preventDefault @ondrop="OnDrop">
        <CascadingValue Value="Diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>

</div>
