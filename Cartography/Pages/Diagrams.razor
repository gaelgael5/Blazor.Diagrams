@page "/diagrams"

@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models

<!-- required to resolve DiagramCanvas component -->
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Tools

<!--
Parent of DiagramCanvas has to have a fixed width/height
or it will not be rendered.

100vw = 100% viewport width
100vh = 100% viewport height
-->
<div class="row h-100">

    @* Toolbox *@

    <MatAccordion Style="width: fit-content" Multi="true">
        @foreach (ToolboxCategory category in toolbox.Categories())
        {
            <MatExpansionPanel Style="width:120px">
                <MatExpansionPanelSummary>
                    <MatExpansionPanelHeader><MatIcon Icon="@category.Icon"></MatIcon>@category.Label</MatExpansionPanelHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    @foreach (ToolboxItem item in toolbox.GetByCategory(category))
                    {
                        string uuid = item.Uuid.ToString();

                        <MatCard class="row" draggable="true" @ondragstart="() => OnDragStart(uuid)" Style="width:fit-content;max-width:110px;min-width:100px;marging:50px">
                            <MatCardContent style="text-align:center">
                                <MatIcon Icon="@item.Icon" />
                                <MatHeadline6 Style="font-size:12px;">
                                    @item.Label
                                </MatHeadline6>
                            </MatCardContent>
                        </MatCard>

                    }
                </MatExpansionPanelDetails>

            </MatExpansionPanel>
        }
    </MatAccordion>

    <div class="col-9" style="width:100vw; height: 100vh"
         ondragover="event.preventDefault();"
         @ondragover:preventDefault @ondrop="OnDrop">
        <CascadingValue Value="Diagram">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>

</div>
